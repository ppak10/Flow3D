from .base import SimulationBase
from .huggingface import SimulationHuggingFace
from .measurements import SimulationMeasurements
from .name import SimulationName
from .parameters import SimulationParameters
from .post_processing import SimulationPostProcessing
from .prepin import SimulationPrepin
from .status import SimulationStatus
from .run import SimulationRun
from .utils.compression import SimulationUtilsCompression
from .utils.crop import SimulationUtilsCrop
from .utils.decorators import SimulationUtilsDecorators
from .utils.mesh import SimulationUtilsMesh
from .utils.multiprocessing import SimulationUtilsMultiprocessing
from .view import SimulationView
from .visualizations import SimulationVisualizations

class Simulation(
    SimulationBase,
    SimulationParameters,

    SimulationHuggingFace,
    SimulationMeasurements,
    SimulationName,
    SimulationPostProcessing,
    SimulationPrepin,
    SimulationRun,
    SimulationStatus,
    SimulationUtilsCompression,
    SimulationUtilsCrop,
    SimulationUtilsDecorators,
    SimulationUtilsMesh,
    SimulationUtilsMultiprocessing,
    SimulationView,
    SimulationVisualizations,
):
    def __init__(
        self,
        version: float = 0,
        name: str = None,
        filename: str = "simulation",
        use_adaptive_domain: bool = False,
        use_template: bool = True,
        verbose: bool = False,
        **kwargs,
    ):
        """
        @param version: Effects naming convention and folder structure.
        @param name: Autogenerated with parameters (mgs).
        @param filename: Used for Flow 3D files such as `prepin.simulation`.
        @param use_adaptive_domain: Limits domain based on expected melt pool.
        @param use_template: Uses template for generating `prepin` file.
        @param verbose: For debugging. 

        @param power: Laser Power (W)
        @param velocity: Scan Velocity (m/s)
        @param beam_diameter: Beam Diameter (m) -> defaults to 1E-4 (100 µm)
        @param lens_radius: Lens Radius (m) -> defaults to 5E-5 (50 µm)
        @param spot_radius: Spot Radius (m) -> defaults to 5E-5 (50 µm)
        @param gauss_beam: Gaussian Beam (m) -> defaults to 5E-5/√2 (50/√2 µm)
        @param mesh_size: Mesh Size (m) -> defaults to 2E-5 (20 µm)
        @param mesh_x_start: Mesh X Start (m) -> defaults to 5E-4 m (500 µm)
        @param mesh_x_end: Mesh X End (m) -> defaults to 3E-3 m (3000 µm)
        @param mesh_y_start: Mesh Y Start (m) -> defaults to 0 m (0 µm)
        @param mesh_y_end: Mesh Y End (m) -> defaults to 6E-4 m (600 µm)
        @param mesh_z_start: Mesh Z Start (m) -> defaults to 0 m (0 µm)
        @param mesh_z_end: Mesh Z End (m) -> defaults to 6E-4 m (600 µm)
        @param fluid_region_x_start: Fluid back boundary (default 0 µm)
        @param fluid_region_x_end: Fluid front boundary (default 2800 µm)
        @param fluid_region_y_start: Fluid left boundary (default 0 µm)
        @param fluid_region_y_end: Fluid right boundary (default 600 µm)
        @param fluid_region_z_start: Fluid bottom boundary (default 0 µm)
        @param fluid_region_z_end: Fluid top boundary (default 400 µm)
        """
        super().__init__(
            version = version,
            name = name,
            filename = filename,
            use_adaptive_domain = use_adaptive_domain,
            use_template = use_template,
            verbose = verbose,
            **kwargs,
        )

    def __lt__(self, other):
        return self.name < other.name
